"""Add messages table

Revision ID: 40d4252deb5b
Revises: dc285eabea90
Create Date: 2025-07-31 11:25:30.567076

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "40d4252deb5b"
down_revision: Union[str, None] = "dc285eabea90"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "messages",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("agent_instance_id", sa.UUID(), nullable=False),
        sa.Column(
            "sender_type", sa.Enum("AGENT", "USER", name="sendertype"), nullable=False
        ),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("requires_user_input", sa.Boolean(), nullable=False),
        sa.Column(
            "message_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["agent_instance_id"],
            ["agent_instances.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_messages_instance_created",
        "messages",
        ["agent_instance_id", "created_at"],
        unique=False,
    )

    # Add last_read_message_id to agent_instances
    op.add_column(
        "agent_instances",
        sa.Column("last_read_message_id", postgresql.UUID(as_uuid=True), nullable=True),
    )
    # Create the foreign key constraint after both tables exist to avoid circular dependency
    op.create_foreign_key(
        "fk_agent_instances_last_read_message",
        "agent_instances",
        "messages",
        ["last_read_message_id"],
        ["id"],
        ondelete="SET NULL",
    )

    # Create function for message notifications
    op.execute("""
        CREATE OR REPLACE FUNCTION notify_message_insert() RETURNS trigger AS $$
        DECLARE
            channel_name text;
            payload text;
        BEGIN
            -- Create channel name based on instance ID
            channel_name := 'message_channel_' || NEW.agent_instance_id::text;

            -- Create JSON payload with message data
            payload := json_build_object(
                'id', NEW.id,
                'agent_instance_id', NEW.agent_instance_id,
                'sender_type', NEW.sender_type,
                'content', NEW.content,
                'created_at', NEW.created_at,
                'requires_user_input', NEW.requires_user_input,
                'message_metadata', NEW.message_metadata
            )::text;

            -- Send notification (quote channel name for UUIDs with hyphens)
            EXECUTE format('NOTIFY %I, %L', channel_name, payload);

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    # Create trigger on messages table
    op.execute("""
        CREATE TRIGGER message_insert_notify
        AFTER INSERT ON messages
        FOR EACH ROW
        EXECUTE FUNCTION notify_message_insert();
    """)

    # Create function for status change notifications
    op.execute("""
        CREATE OR REPLACE FUNCTION notify_status_change() RETURNS trigger AS $$
        DECLARE
            channel_name text;
            payload text;
        BEGIN
            -- Only notify if status actually changed
            IF OLD.status IS DISTINCT FROM NEW.status THEN
                -- Create channel name based on instance ID
                channel_name := 'message_channel_' || NEW.id::text;

                -- Create JSON payload with status update data
                payload := json_build_object(
                    'event_type', 'status_update',
                    'instance_id', NEW.id,
                    'status', NEW.status,
                    'timestamp', NOW()
                )::text;

                -- Send notification (quote channel name for UUIDs with hyphens)
                EXECUTE format('NOTIFY %I, %L', channel_name, payload);
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    # Create trigger on agent_instances table for status updates
    op.execute("""
        CREATE TRIGGER agent_instance_status_notify
        AFTER UPDATE OF status ON agent_instances
        FOR EACH ROW
        EXECUTE FUNCTION notify_status_change();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop status change trigger and function
    op.execute(
        "DROP TRIGGER IF EXISTS agent_instance_status_notify ON agent_instances;"
    )
    op.execute("DROP FUNCTION IF EXISTS notify_status_change();")

    # Drop message trigger and function
    op.execute("DROP TRIGGER IF EXISTS message_insert_notify ON messages;")
    op.execute("DROP FUNCTION IF EXISTS notify_message_insert();")

    op.drop_constraint(
        "fk_agent_instances_last_read_message", "agent_instances", type_="foreignkey"
    )
    op.drop_column("agent_instances", "last_read_message_id")
    op.drop_index("idx_messages_instance_created", table_name="messages")
    op.drop_table("messages")
    # ### end Alembic commands ###
